import TreeMap from '../../../src/collection/TreeMap.js'

test('TreeMap::bulkPut', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.bulkPut(
    { key: -23, value: 'aV' },
    { key: -22, value: 'aU' },
    { key: -21, value: 'aT' },
    { key: -20, value: 'aS' },
    { key: -19, value: 'aR' },
    { key: -18, value: 'aQ' },
    { key: -17, value: 'aP' },
    { key: -16, value: 'aO' },
    { key: -15, value: 'aN' },
    { key: -14, value: 'aM' },
    { key: -13, value: 'aL' },
    { key: -12, value: 'aK' },
    { key: -11, value: 'aJ' },
    { key: -10, value: 'aI' },
    { key: -9, value: 'aH' },
    { key: -8, value: 'aG' },
    { key: -7, value: 'ai' },
    { key: -6, value: 'ae' },
    { key: -5, value: 'aj' },
    { key: -4, value: 'aW' },
    { key: -3, value: 'ak' },
    { key: -2, value: 'af' },
    { key: -1, value: 'al' },
    { key: 1, value: 'am' },
    { key: 2, value: 'ag' },
    { key: 3, value: 'an' },
    { key: 4, value: 'aX' },
    { key: 5, value: 'ao' },
    { key: 6, value: 'ah' },
    { key: 7, value: 'ap' },
    { key: 8, value: 'aq' },
    { key: 9, value: 'ar' },
    { key: 10, value: 'as' },
    { key: 11, value: 'at' },
    { key: 12, value: 'au' },
    { key: 13, value: 'av' },
    { key: 14, value: 'aw' },
    { key: 15, value: 'ax' },
    { key: 16, value: 'ay' },
    { key: 17, value: 'az' },
    { key: 18, value: 'aA' },
    { key: 19, value: 'aB' },
    { key: 20, value: 'aC' },
    { key: 21, value: 'aD' },
    { key: 22, value: 'aE' },
    { key: 23, value: 'aF' }
  )
  expect(treeMap.get(-24)).toBeUndefined()
  expect(treeMap.get(-23)).toBe('aV')
  expect(treeMap.get(-22)).toBe('aU')
  expect(treeMap.get(-21)).toBe('aT')
  expect(treeMap.get(-20)).toBe('aS')
  expect(treeMap.get(-19)).toBe('aR')
  expect(treeMap.get(-18)).toBe('aQ')
  expect(treeMap.get(-17)).toBe('aP')
  expect(treeMap.get(-16)).toBe('aO')
  expect(treeMap.get(-15)).toBe('aN')
  expect(treeMap.get(-14)).toBe('aM')
  expect(treeMap.get(-13)).toBe('aL')
  expect(treeMap.get(-12)).toBe('aK')
  expect(treeMap.get(-11)).toBe('aJ')
  expect(treeMap.get(-10)).toBe('aI')
  expect(treeMap.get(-9)).toBe('aH')
  expect(treeMap.get(-8)).toBe('aG')
  expect(treeMap.get(-7)).toBe('ai')
  expect(treeMap.get(-6)).toBe('ae')
  expect(treeMap.get(-5)).toBe('aj')
  expect(treeMap.get(-4)).toBe('aW')
  expect(treeMap.get(-3)).toBe('ak')
  expect(treeMap.get(-2)).toBe('af')
  expect(treeMap.get(-1)).toBe('al')
  expect(treeMap.get(1)).toBe('am')
  expect(treeMap.get(2)).toBe('ag')
  expect(treeMap.get(3)).toBe('an')
  expect(treeMap.get(4)).toBe('aX')
  expect(treeMap.get(5)).toBe('ao')
  expect(treeMap.get(6)).toBe('ah')
  expect(treeMap.get(7)).toBe('ap')
  expect(treeMap.get(8)).toBe('aq')
  expect(treeMap.get(9)).toBe('ar')
  expect(treeMap.get(10)).toBe('as')
  expect(treeMap.get(11)).toBe('at')
  expect(treeMap.get(12)).toBe('au')
  expect(treeMap.get(13)).toBe('av')
  expect(treeMap.get(14)).toBe('aw')
  expect(treeMap.get(15)).toBe('ax')
  expect(treeMap.get(16)).toBe('ay')
  expect(treeMap.get(17)).toBe('az')
  expect(treeMap.get(18)).toBe('aA')
  expect(treeMap.get(19)).toBe('aB')
  expect(treeMap.get(20)).toBe('aC')
  expect(treeMap.get(21)).toBe('aD')
  expect(treeMap.get(22)).toBe('aE')
  expect(treeMap.get(23)).toBe('aF')
  expect(treeMap.get(-24)).toBeUndefined()
})

test('TreeMap::put', () => {
  const treeMap = new TreeMap<number, String>()
  treeMap.put(0, 'a')
  expect(treeMap.get(0)).toBe('a')
  treeMap.put(0, 'b')
  expect(treeMap.get(0)).toBe('b')
  treeMap.put(-4, 'c')
  expect(treeMap.get(-4)).toBe('c')
  expect(treeMap.get(0)).toBe('b')
  treeMap.put(4, 'd')
  expect(treeMap.get(-4)).toBe('c')
  expect(treeMap.get(0)).toBe('b')
  expect(treeMap.get(4)).toBe('d')
  treeMap.put(-6, 'e')
  treeMap.put(-2, 'f')
  treeMap.put(2, 'g')
  treeMap.put(6, 'h')
  treeMap.put(-7, 'i')
  treeMap.put(-5, 'j')
  treeMap.put(-3, 'k')
  treeMap.put(-1, 'l')
  treeMap.put(1, 'm')
  treeMap.put(3, 'n')
  treeMap.put(5, 'o')
  treeMap.put(7, 'p')
  expect(treeMap.get(-7)).toBe('i')
  expect(treeMap.get(-6)).toBe('e')
  expect(treeMap.get(-5)).toBe('j')
  expect(treeMap.get(-3)).toBe('k')
  expect(treeMap.get(-2)).toBe('f')
  expect(treeMap.get(-1)).toBe('l')
  expect(treeMap.get(1)).toBe('m')
  expect(treeMap.get(2)).toBe('g')
  expect(treeMap.get(3)).toBe('n')
  expect(treeMap.get(5)).toBe('o')
  expect(treeMap.get(6)).toBe('h')
  expect(treeMap.get(7)).toBe('p')
  treeMap.put(8, 'q')
  treeMap.put(9, 'r')
  treeMap.put(10, 's')
  treeMap.put(11, 't')
  treeMap.put(12, 'u')
  treeMap.put(13, 'v')
  treeMap.put(14, 'w')
  treeMap.put(15, 'x')
  treeMap.put(16, 'y')
  treeMap.put(17, 'z')
  treeMap.put(18, 'A')
  treeMap.put(19, 'B')
  treeMap.put(20, 'C')
  treeMap.put(21, 'D')
  treeMap.put(22, 'E')
  treeMap.put(23, 'F')
  expect(treeMap.get(-7)).toBe('i')
  expect(treeMap.get(-6)).toBe('e')
  expect(treeMap.get(-5)).toBe('j')
  expect(treeMap.get(-3)).toBe('k')
  expect(treeMap.get(-2)).toBe('f')
  expect(treeMap.get(-1)).toBe('l')
  expect(treeMap.get(1)).toBe('m')
  expect(treeMap.get(2)).toBe('g')
  expect(treeMap.get(3)).toBe('n')
  expect(treeMap.get(5)).toBe('o')
  expect(treeMap.get(6)).toBe('h')
  expect(treeMap.get(7)).toBe('p')
  expect(treeMap.get(8)).toBe('q')
  expect(treeMap.get(9)).toBe('r')
  expect(treeMap.get(10)).toBe('s')
  expect(treeMap.get(11)).toBe('t')
  expect(treeMap.get(12)).toBe('u')
  expect(treeMap.get(13)).toBe('v')
  expect(treeMap.get(14)).toBe('w')
  expect(treeMap.get(15)).toBe('x')
  expect(treeMap.get(16)).toBe('y')
  expect(treeMap.get(17)).toBe('z')
  expect(treeMap.get(18)).toBe('A')
  expect(treeMap.get(19)).toBe('B')
  expect(treeMap.get(20)).toBe('C')
  expect(treeMap.get(21)).toBe('D')
  expect(treeMap.get(22)).toBe('E')
  expect(treeMap.get(23)).toBe('F')
  treeMap.put(-8, 'G')
  treeMap.put(-9, 'H')
  treeMap.put(-10, 'I')
  treeMap.put(-11, 'J')
  treeMap.put(-12, 'K')
  treeMap.put(-13, 'L')
  treeMap.put(-14, 'M')
  treeMap.put(-15, 'N')
  treeMap.put(-16, 'O')
  treeMap.put(-17, 'P')
  treeMap.put(-18, 'Q')
  treeMap.put(-19, 'R')
  treeMap.put(-20, 'S')
  treeMap.put(-21, 'T')
  treeMap.put(-22, 'U')
  treeMap.put(-23, 'V')
  expect(treeMap.get(-23)).toBe('V')
  expect(treeMap.get(-22)).toBe('U')
  expect(treeMap.get(-21)).toBe('T')
  expect(treeMap.get(-20)).toBe('S')
  expect(treeMap.get(-19)).toBe('R')
  expect(treeMap.get(-18)).toBe('Q')
  expect(treeMap.get(-17)).toBe('P')
  expect(treeMap.get(-16)).toBe('O')
  expect(treeMap.get(-15)).toBe('N')
  expect(treeMap.get(-14)).toBe('M')
  expect(treeMap.get(-13)).toBe('L')
  expect(treeMap.get(-12)).toBe('K')
  expect(treeMap.get(-11)).toBe('J')
  expect(treeMap.get(-10)).toBe('I')
  expect(treeMap.get(-9)).toBe('H')
  expect(treeMap.get(-8)).toBe('G')
  expect(treeMap.get(-7)).toBe('i')
  expect(treeMap.get(-6)).toBe('e')
  expect(treeMap.get(-5)).toBe('j')
  expect(treeMap.get(-3)).toBe('k')
  expect(treeMap.get(-2)).toBe('f')
  expect(treeMap.get(-1)).toBe('l')
  expect(treeMap.get(1)).toBe('m')
  expect(treeMap.get(2)).toBe('g')
  expect(treeMap.get(3)).toBe('n')
  expect(treeMap.get(5)).toBe('o')
  expect(treeMap.get(6)).toBe('h')
  expect(treeMap.get(7)).toBe('p')
  expect(treeMap.get(8)).toBe('q')
  expect(treeMap.get(9)).toBe('r')
  expect(treeMap.get(10)).toBe('s')
  expect(treeMap.get(11)).toBe('t')
  expect(treeMap.get(12)).toBe('u')
  expect(treeMap.get(13)).toBe('v')
  expect(treeMap.get(14)).toBe('w')
  expect(treeMap.get(15)).toBe('x')
  expect(treeMap.get(16)).toBe('y')
  expect(treeMap.get(17)).toBe('z')
  expect(treeMap.get(18)).toBe('A')
  expect(treeMap.get(19)).toBe('B')
  expect(treeMap.get(20)).toBe('C')
  expect(treeMap.get(21)).toBe('D')
  expect(treeMap.get(22)).toBe('E')
  expect(treeMap.get(23)).toBe('F')
  treeMap.put(-4, 'W')
  treeMap.put(4, 'X')
  expect(treeMap.get(-23)).toBe('V')
  expect(treeMap.get(-22)).toBe('U')
  expect(treeMap.get(-21)).toBe('T')
  expect(treeMap.get(-20)).toBe('S')
  expect(treeMap.get(-19)).toBe('R')
  expect(treeMap.get(-18)).toBe('Q')
  expect(treeMap.get(-17)).toBe('P')
  expect(treeMap.get(-16)).toBe('O')
  expect(treeMap.get(-15)).toBe('N')
  expect(treeMap.get(-14)).toBe('M')
  expect(treeMap.get(-13)).toBe('L')
  expect(treeMap.get(-12)).toBe('K')
  expect(treeMap.get(-11)).toBe('J')
  expect(treeMap.get(-10)).toBe('I')
  expect(treeMap.get(-9)).toBe('H')
  expect(treeMap.get(-8)).toBe('G')
  expect(treeMap.get(-7)).toBe('i')
  expect(treeMap.get(-6)).toBe('e')
  expect(treeMap.get(-5)).toBe('j')
  expect(treeMap.get(-4)).toBe('W')
  expect(treeMap.get(-3)).toBe('k')
  expect(treeMap.get(-2)).toBe('f')
  expect(treeMap.get(-1)).toBe('l')
  expect(treeMap.get(1)).toBe('m')
  expect(treeMap.get(2)).toBe('g')
  expect(treeMap.get(3)).toBe('n')
  expect(treeMap.get(4)).toBe('X')
  expect(treeMap.get(5)).toBe('o')
  expect(treeMap.get(6)).toBe('h')
  expect(treeMap.get(7)).toBe('p')
  expect(treeMap.get(8)).toBe('q')
  expect(treeMap.get(9)).toBe('r')
  expect(treeMap.get(10)).toBe('s')
  expect(treeMap.get(11)).toBe('t')
  expect(treeMap.get(12)).toBe('u')
  expect(treeMap.get(13)).toBe('v')
  expect(treeMap.get(14)).toBe('w')
  expect(treeMap.get(15)).toBe('x')
  expect(treeMap.get(16)).toBe('y')
  expect(treeMap.get(17)).toBe('z')
  expect(treeMap.get(18)).toBe('A')
  expect(treeMap.get(19)).toBe('B')
  expect(treeMap.get(20)).toBe('C')
  expect(treeMap.get(21)).toBe('D')
  expect(treeMap.get(22)).toBe('E')
  expect(treeMap.get(23)).toBe('F')
  treeMap.put(-23, 'aV')
  treeMap.put(-22, 'aU')
  treeMap.put(-21, 'aT')
  treeMap.put(-20, 'aS')
  treeMap.put(-19, 'aR')
  treeMap.put(-18, 'aQ')
  treeMap.put(-17, 'aP')
  treeMap.put(-16, 'aO')
  treeMap.put(-15, 'aN')
  treeMap.put(-14, 'aM')
  treeMap.put(-13, 'aL')
  treeMap.put(-12, 'aK')
  treeMap.put(-11, 'aJ')
  treeMap.put(-10, 'aI')
  treeMap.put(-9, 'aH')
  treeMap.put(-8, 'aG')
  treeMap.put(-7, 'ai')
  treeMap.put(-6, 'ae')
  treeMap.put(-5, 'aj')
  treeMap.put(-4, 'aW')
  treeMap.put(-3, 'ak')
  treeMap.put(-2, 'af')
  treeMap.put(-1, 'al')
  treeMap.put(1, 'am')
  treeMap.put(2, 'ag')
  treeMap.put(3, 'an')
  treeMap.put(4, 'aX')
  treeMap.put(5, 'ao')
  treeMap.put(6, 'ah')
  treeMap.put(7, 'ap')
  treeMap.put(8, 'aq')
  treeMap.put(9, 'ar')
  treeMap.put(10, 'as')
  treeMap.put(11, 'at')
  treeMap.put(12, 'au')
  treeMap.put(13, 'av')
  treeMap.put(14, 'aw')
  treeMap.put(15, 'ax')
  treeMap.put(16, 'ay')
  treeMap.put(17, 'az')
  treeMap.put(18, 'aA')
  treeMap.put(19, 'aB')
  treeMap.put(20, 'aC')
  treeMap.put(21, 'aD')
  treeMap.put(22, 'aE')
  treeMap.put(23, 'aF')
  expect(treeMap.get(-23)).toBe('aV')
  expect(treeMap.get(-22)).toBe('aU')
  expect(treeMap.get(-21)).toBe('aT')
  expect(treeMap.get(-20)).toBe('aS')
  expect(treeMap.get(-19)).toBe('aR')
  expect(treeMap.get(-18)).toBe('aQ')
  expect(treeMap.get(-17)).toBe('aP')
  expect(treeMap.get(-16)).toBe('aO')
  expect(treeMap.get(-15)).toBe('aN')
  expect(treeMap.get(-14)).toBe('aM')
  expect(treeMap.get(-13)).toBe('aL')
  expect(treeMap.get(-12)).toBe('aK')
  expect(treeMap.get(-11)).toBe('aJ')
  expect(treeMap.get(-10)).toBe('aI')
  expect(treeMap.get(-9)).toBe('aH')
  expect(treeMap.get(-8)).toBe('aG')
  expect(treeMap.get(-7)).toBe('ai')
  expect(treeMap.get(-6)).toBe('ae')
  expect(treeMap.get(-5)).toBe('aj')
  expect(treeMap.get(-4)).toBe('aW')
  expect(treeMap.get(-3)).toBe('ak')
  expect(treeMap.get(-2)).toBe('af')
  expect(treeMap.get(-1)).toBe('al')
  expect(treeMap.get(1)).toBe('am')
  expect(treeMap.get(2)).toBe('ag')
  expect(treeMap.get(3)).toBe('an')
  expect(treeMap.get(4)).toBe('aX')
  expect(treeMap.get(5)).toBe('ao')
  expect(treeMap.get(6)).toBe('ah')
  expect(treeMap.get(7)).toBe('ap')
  expect(treeMap.get(8)).toBe('aq')
  expect(treeMap.get(9)).toBe('ar')
  expect(treeMap.get(10)).toBe('as')
  expect(treeMap.get(11)).toBe('at')
  expect(treeMap.get(12)).toBe('au')
  expect(treeMap.get(13)).toBe('av')
  expect(treeMap.get(14)).toBe('aw')
  expect(treeMap.get(15)).toBe('ax')
  expect(treeMap.get(16)).toBe('ay')
  expect(treeMap.get(17)).toBe('az')
  expect(treeMap.get(18)).toBe('aA')
  expect(treeMap.get(19)).toBe('aB')
  expect(treeMap.get(20)).toBe('aC')
  expect(treeMap.get(21)).toBe('aD')
  expect(treeMap.get(22)).toBe('aE')
  expect(treeMap.get(23)).toBe('aF')
})

test('TreeMap::has', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.put(-23, 'aV')
  treeMap.put(-22, 'aU')
  treeMap.put(-21, 'aT')
  treeMap.put(-20, 'aS')
  treeMap.put(-19, 'aR')
  treeMap.put(-18, 'aQ')
  treeMap.put(-17, 'aP')
  treeMap.put(-16, 'aO')
  treeMap.put(-15, 'aN')
  treeMap.put(-14, 'aM')
  treeMap.put(-13, 'aL')
  treeMap.put(-12, 'aK')
  treeMap.put(-11, 'aJ')
  treeMap.put(-10, 'aI')
  treeMap.put(-9, 'aH')
  treeMap.put(-8, 'aG')
  treeMap.put(-7, 'ai')
  treeMap.put(-6, 'ae')
  treeMap.put(-5, 'aj')
  treeMap.put(-4, 'aW')
  treeMap.put(-3, 'ak')
  treeMap.put(-2, 'af')
  treeMap.put(-1, 'al')
  treeMap.put(1, 'am')
  treeMap.put(2, 'ag')
  treeMap.put(3, 'an')
  treeMap.put(4, 'aX')
  treeMap.put(5, 'ao')
  treeMap.put(6, 'ah')
  treeMap.put(7, 'ap')
  treeMap.put(8, 'aq')
  treeMap.put(9, 'ar')
  treeMap.put(10, 'as')
  treeMap.put(11, 'at')
  treeMap.put(12, 'au')
  treeMap.put(13, 'av')
  treeMap.put(14, 'aw')
  treeMap.put(15, 'ax')
  treeMap.put(16, 'ay')
  treeMap.put(17, 'az')
  treeMap.put(18, 'aA')
  treeMap.put(19, 'aB')
  treeMap.put(20, 'aC')
  treeMap.put(21, 'aD')
  treeMap.put(22, 'aE')
  treeMap.put(23, 'aF')
  expect(treeMap.has(-24)).toBeFalsy()
  expect(treeMap.has(-23)).toBeTruthy()
  expect(treeMap.has(-22)).toBeTruthy()
  expect(treeMap.has(-21)).toBeTruthy()
  expect(treeMap.has(-20)).toBeTruthy()
  expect(treeMap.has(-19)).toBeTruthy()
  expect(treeMap.has(-18)).toBeTruthy()
  expect(treeMap.has(-17)).toBeTruthy()
  expect(treeMap.has(-16)).toBeTruthy()
  expect(treeMap.has(-15)).toBeTruthy()
  expect(treeMap.has(-14)).toBeTruthy()
  expect(treeMap.has(-13)).toBeTruthy()
  expect(treeMap.has(-12)).toBeTruthy()
  expect(treeMap.has(-11)).toBeTruthy()
  expect(treeMap.has(-10)).toBeTruthy()
  expect(treeMap.has(-9)).toBeTruthy()
  expect(treeMap.has(-8)).toBeTruthy()
  expect(treeMap.has(-7)).toBeTruthy()
  expect(treeMap.has(-6)).toBeTruthy()
  expect(treeMap.has(-5)).toBeTruthy()
  expect(treeMap.has(-4)).toBeTruthy()
  expect(treeMap.has(-3)).toBeTruthy()
  expect(treeMap.has(-2)).toBeTruthy()
  expect(treeMap.has(-1)).toBeTruthy()
  expect(treeMap.has(1)).toBeTruthy()
  expect(treeMap.has(2)).toBeTruthy()
  expect(treeMap.has(3)).toBeTruthy()
  expect(treeMap.has(4)).toBeTruthy()
  expect(treeMap.has(5)).toBeTruthy()
  expect(treeMap.has(6)).toBeTruthy()
  expect(treeMap.has(7)).toBeTruthy()
  expect(treeMap.has(8)).toBeTruthy()
  expect(treeMap.has(9)).toBeTruthy()
  expect(treeMap.has(10)).toBeTruthy()
  expect(treeMap.has(11)).toBeTruthy()
  expect(treeMap.has(12)).toBeTruthy()
  expect(treeMap.has(13)).toBeTruthy()
  expect(treeMap.has(14)).toBeTruthy()
  expect(treeMap.has(15)).toBeTruthy()
  expect(treeMap.has(16)).toBeTruthy()
  expect(treeMap.has(17)).toBeTruthy()
  expect(treeMap.has(18)).toBeTruthy()
  expect(treeMap.has(19)).toBeTruthy()
  expect(treeMap.has(20)).toBeTruthy()
  expect(treeMap.has(21)).toBeTruthy()
  expect(treeMap.has(22)).toBeTruthy()
  expect(treeMap.has(23)).toBeTruthy()
  expect(treeMap.has(-24)).toBeFalsy()
})

test('TreeMap::get', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.put(-23, 'aV')
  treeMap.put(-22, 'aU')
  treeMap.put(-21, 'aT')
  treeMap.put(-20, 'aS')
  treeMap.put(-19, 'aR')
  treeMap.put(-18, 'aQ')
  treeMap.put(-17, 'aP')
  treeMap.put(-16, 'aO')
  treeMap.put(-15, 'aN')
  treeMap.put(-14, 'aM')
  treeMap.put(-13, 'aL')
  treeMap.put(-12, 'aK')
  treeMap.put(-11, 'aJ')
  treeMap.put(-10, 'aI')
  treeMap.put(-9, 'aH')
  treeMap.put(-8, 'aG')
  treeMap.put(-7, 'ai')
  treeMap.put(-6, 'ae')
  treeMap.put(-5, 'aj')
  treeMap.put(-4, 'aW')
  treeMap.put(-3, 'ak')
  treeMap.put(-2, 'af')
  treeMap.put(-1, 'al')
  treeMap.put(1, 'am')
  treeMap.put(2, 'ag')
  treeMap.put(3, 'an')
  treeMap.put(4, 'aX')
  treeMap.put(5, 'ao')
  treeMap.put(6, 'ah')
  treeMap.put(7, 'ap')
  treeMap.put(8, 'aq')
  treeMap.put(9, 'ar')
  treeMap.put(10, 'as')
  treeMap.put(11, 'at')
  treeMap.put(12, 'au')
  treeMap.put(13, 'av')
  treeMap.put(14, 'aw')
  treeMap.put(15, 'ax')
  treeMap.put(16, 'ay')
  treeMap.put(17, 'az')
  treeMap.put(18, 'aA')
  treeMap.put(19, 'aB')
  treeMap.put(20, 'aC')
  treeMap.put(21, 'aD')
  treeMap.put(22, 'aE')
  treeMap.put(23, 'aF')
  expect(treeMap.get(-24)).toBeUndefined()
  expect(treeMap.get(-23)).toBe('aV')
  expect(treeMap.get(-22)).toBe('aU')
  expect(treeMap.get(-21)).toBe('aT')
  expect(treeMap.get(-20)).toBe('aS')
  expect(treeMap.get(-19)).toBe('aR')
  expect(treeMap.get(-18)).toBe('aQ')
  expect(treeMap.get(-17)).toBe('aP')
  expect(treeMap.get(-16)).toBe('aO')
  expect(treeMap.get(-15)).toBe('aN')
  expect(treeMap.get(-14)).toBe('aM')
  expect(treeMap.get(-13)).toBe('aL')
  expect(treeMap.get(-12)).toBe('aK')
  expect(treeMap.get(-11)).toBe('aJ')
  expect(treeMap.get(-10)).toBe('aI')
  expect(treeMap.get(-9)).toBe('aH')
  expect(treeMap.get(-8)).toBe('aG')
  expect(treeMap.get(-7)).toBe('ai')
  expect(treeMap.get(-6)).toBe('ae')
  expect(treeMap.get(-5)).toBe('aj')
  expect(treeMap.get(-4)).toBe('aW')
  expect(treeMap.get(-3)).toBe('ak')
  expect(treeMap.get(-2)).toBe('af')
  expect(treeMap.get(-1)).toBe('al')
  expect(treeMap.get(1)).toBe('am')
  expect(treeMap.get(2)).toBe('ag')
  expect(treeMap.get(3)).toBe('an')
  expect(treeMap.get(4)).toBe('aX')
  expect(treeMap.get(5)).toBe('ao')
  expect(treeMap.get(6)).toBe('ah')
  expect(treeMap.get(7)).toBe('ap')
  expect(treeMap.get(8)).toBe('aq')
  expect(treeMap.get(9)).toBe('ar')
  expect(treeMap.get(10)).toBe('as')
  expect(treeMap.get(11)).toBe('at')
  expect(treeMap.get(12)).toBe('au')
  expect(treeMap.get(13)).toBe('av')
  expect(treeMap.get(14)).toBe('aw')
  expect(treeMap.get(15)).toBe('ax')
  expect(treeMap.get(16)).toBe('ay')
  expect(treeMap.get(17)).toBe('az')
  expect(treeMap.get(18)).toBe('aA')
  expect(treeMap.get(19)).toBe('aB')
  expect(treeMap.get(20)).toBe('aC')
  expect(treeMap.get(21)).toBe('aD')
  expect(treeMap.get(22)).toBe('aE')
  expect(treeMap.get(23)).toBe('aF')
  expect(treeMap.get(-24)).toBeUndefined()
})

test('TreeMap::set', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.put(-23, 'aV')
  treeMap.put(-22, 'aU')
  treeMap.put(-21, 'aT')
  treeMap.put(-20, 'aS')
  treeMap.put(-19, 'aR')
  treeMap.put(-18, 'aQ')
  treeMap.put(-17, 'aP')
  treeMap.put(-16, 'aO')
  treeMap.put(-15, 'aN')
  treeMap.put(-14, 'aM')
  treeMap.put(-13, 'aL')
  treeMap.put(-12, 'aK')
  treeMap.put(-11, 'aJ')
  treeMap.put(-10, 'aI')
  treeMap.put(-9, 'aH')
  treeMap.put(-8, 'aG')
  treeMap.put(-7, 'ai')
  treeMap.put(-6, 'ae')
  treeMap.put(-5, 'aj')
  treeMap.put(-4, 'aW')
  treeMap.put(-3, 'ak')
  treeMap.put(-2, 'af')
  treeMap.put(-1, 'al')
  treeMap.put(1, 'am')
  treeMap.put(2, 'ag')
  treeMap.put(3, 'an')
  treeMap.put(4, 'aX')
  treeMap.put(5, 'ao')
  treeMap.put(6, 'ah')
  treeMap.put(7, 'ap')
  treeMap.put(8, 'aq')
  treeMap.put(9, 'ar')
  treeMap.put(10, 'as')
  treeMap.put(11, 'at')
  treeMap.put(12, 'au')
  treeMap.put(13, 'av')
  treeMap.put(14, 'aw')
  treeMap.put(15, 'ax')
  treeMap.put(16, 'ay')
  treeMap.put(17, 'az')
  treeMap.put(18, 'aA')
  treeMap.put(19, 'aB')
  treeMap.put(20, 'aC')
  treeMap.put(21, 'aD')
  treeMap.put(22, 'aE')
  treeMap.put(23, 'aF')
  treeMap.set(-23, 'V')
  treeMap.set(-22, 'U')
  treeMap.set(-21, 'T')
  treeMap.set(-20, 'S')
  treeMap.set(-19, 'R')
  treeMap.set(-18, 'Q')
  treeMap.set(-17, 'P')
  treeMap.set(-16, 'O')
  treeMap.set(-15, 'N')
  treeMap.set(-14, 'M')
  treeMap.set(-13, 'L')
  treeMap.set(-12, 'K')
  treeMap.set(-11, 'J')
  treeMap.set(-10, 'I')
  treeMap.set(-9, 'H')
  treeMap.set(-8, 'G')
  treeMap.set(-7, 'i')
  treeMap.set(-6, 'e')
  treeMap.set(-5, 'j')
  treeMap.set(-4, 'W')
  treeMap.set(-3, 'k')
  treeMap.set(-2, 'f')
  treeMap.set(-1, 'l')
  treeMap.set(1, 'm')
  treeMap.set(2, 'g')
  treeMap.set(3, 'n')
  treeMap.set(4, 'X')
  treeMap.set(5, 'o')
  treeMap.set(6, 'h')
  treeMap.set(7, 'p')
  treeMap.set(8, 'q')
  treeMap.set(9, 'r')
  treeMap.set(10, 's')
  treeMap.set(11, 't')
  treeMap.set(12, 'u')
  treeMap.set(13, 'v')
  treeMap.set(14, 'w')
  treeMap.set(15, 'x')
  treeMap.set(16, 'y')
  treeMap.set(17, 'z')
  treeMap.set(18, 'A')
  treeMap.set(19, 'B')
  treeMap.set(20, 'C')
  treeMap.set(21, 'D')
  treeMap.set(22, 'E')
  treeMap.set(23, 'F')
  expect(treeMap.get(-24)).toBeUndefined()
  expect(treeMap.get(-23)).toBe('V')
  expect(treeMap.get(-22)).toBe('U')
  expect(treeMap.get(-21)).toBe('T')
  expect(treeMap.get(-20)).toBe('S')
  expect(treeMap.get(-19)).toBe('R')
  expect(treeMap.get(-18)).toBe('Q')
  expect(treeMap.get(-17)).toBe('P')
  expect(treeMap.get(-16)).toBe('O')
  expect(treeMap.get(-15)).toBe('N')
  expect(treeMap.get(-14)).toBe('M')
  expect(treeMap.get(-13)).toBe('L')
  expect(treeMap.get(-12)).toBe('K')
  expect(treeMap.get(-11)).toBe('J')
  expect(treeMap.get(-10)).toBe('I')
  expect(treeMap.get(-9)).toBe('H')
  expect(treeMap.get(-8)).toBe('G')
  expect(treeMap.get(-7)).toBe('i')
  expect(treeMap.get(-6)).toBe('e')
  expect(treeMap.get(-5)).toBe('j')
  expect(treeMap.get(-4)).toBe('W')
  expect(treeMap.get(-3)).toBe('k')
  expect(treeMap.get(-2)).toBe('f')
  expect(treeMap.get(-1)).toBe('l')
  expect(treeMap.get(1)).toBe('m')
  expect(treeMap.get(2)).toBe('g')
  expect(treeMap.get(3)).toBe('n')
  expect(treeMap.get(4)).toBe('X')
  expect(treeMap.get(5)).toBe('o')
  expect(treeMap.get(6)).toBe('h')
  expect(treeMap.get(7)).toBe('p')
  expect(treeMap.get(8)).toBe('q')
  expect(treeMap.get(9)).toBe('r')
  expect(treeMap.get(10)).toBe('s')
  expect(treeMap.get(11)).toBe('t')
  expect(treeMap.get(12)).toBe('u')
  expect(treeMap.get(13)).toBe('v')
  expect(treeMap.get(14)).toBe('w')
  expect(treeMap.get(15)).toBe('x')
  expect(treeMap.get(16)).toBe('y')
  expect(treeMap.get(17)).toBe('z')
  expect(treeMap.get(18)).toBe('A')
  expect(treeMap.get(19)).toBe('B')
  expect(treeMap.get(20)).toBe('C')
  expect(treeMap.get(21)).toBe('D')
  expect(treeMap.get(22)).toBe('E')
  expect(treeMap.get(23)).toBe('F')
  expect(treeMap.get(-24)).toBeUndefined()
})

test('TreeMap::remove', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.put(-23, 'aV')
  treeMap.put(-22, 'aU')
  treeMap.put(-21, 'aT')
  treeMap.put(-20, 'aS')
  treeMap.put(-19, 'aR')
  treeMap.put(-18, 'aQ')
  treeMap.put(-17, 'aP')
  treeMap.put(-16, 'aO')
  treeMap.put(-15, 'aN')
  treeMap.put(-14, 'aM')
  treeMap.put(-13, 'aL')
  treeMap.put(-12, 'aK')
  treeMap.put(-11, 'aJ')
  treeMap.put(-10, 'aI')
  treeMap.put(-9, 'aH')
  treeMap.put(-8, 'aG')
  treeMap.put(-7, 'ai')
  treeMap.put(-6, 'ae')
  treeMap.put(-5, 'aj')
  treeMap.put(-4, 'aW')
  treeMap.put(-3, 'ak')
  treeMap.put(-2, 'af')
  treeMap.put(-1, 'al')
  treeMap.put(1, 'am')
  treeMap.put(2, 'ag')
  treeMap.put(3, 'an')
  treeMap.put(4, 'aX')
  treeMap.put(5, 'ao')
  treeMap.put(6, 'ah')
  treeMap.put(7, 'ap')
  treeMap.put(8, 'aq')
  treeMap.put(9, 'ar')
  treeMap.put(10, 'as')
  treeMap.put(11, 'at')
  treeMap.put(12, 'au')
  treeMap.put(13, 'av')
  treeMap.put(14, 'aw')
  treeMap.put(15, 'ax')
  treeMap.put(16, 'ay')
  treeMap.put(17, 'az')
  treeMap.put(18, 'aA')
  treeMap.put(19, 'aB')
  treeMap.put(20, 'aC')
  treeMap.put(21, 'aD')
  treeMap.put(22, 'aE')
  treeMap.put(23, 'aF')
  expect(treeMap.remove(-24)).toBeUndefined()
  expect(treeMap.remove(-23)).toBe('aV')
  expect(treeMap.remove(-22)).toBe('aU')
  expect(treeMap.remove(-21)).toBe('aT')
  expect(treeMap.remove(-20)).toBe('aS')
  expect(treeMap.remove(-19)).toBe('aR')
  expect(treeMap.remove(-18)).toBe('aQ')
  expect(treeMap.remove(-17)).toBe('aP')
  expect(treeMap.remove(-16)).toBe('aO')
  expect(treeMap.remove(-15)).toBe('aN')
  expect(treeMap.remove(-14)).toBe('aM')
  expect(treeMap.remove(-13)).toBe('aL')
  expect(treeMap.remove(-12)).toBe('aK')
  expect(treeMap.remove(-11)).toBe('aJ')
  expect(treeMap.remove(-10)).toBe('aI')
  expect(treeMap.remove(-9)).toBe('aH')
  expect(treeMap.remove(-8)).toBe('aG')
  expect(treeMap.remove(-7)).toBe('ai')
  expect(treeMap.remove(-6)).toBe('ae')
  expect(treeMap.remove(-5)).toBe('aj')
  expect(treeMap.remove(-4)).toBe('aW')
  expect(treeMap.remove(-3)).toBe('ak')
  expect(treeMap.remove(-2)).toBe('af')
  expect(treeMap.remove(-1)).toBe('al')
  expect(treeMap.remove(1)).toBe('am')
  expect(treeMap.remove(2)).toBe('ag')
  expect(treeMap.remove(3)).toBe('an')
  expect(treeMap.remove(4)).toBe('aX')
  expect(treeMap.remove(5)).toBe('ao')
  expect(treeMap.remove(6)).toBe('ah')
  expect(treeMap.remove(7)).toBe('ap')
  expect(treeMap.remove(8)).toBe('aq')
  expect(treeMap.remove(9)).toBe('ar')
  expect(treeMap.remove(10)).toBe('as')
  expect(treeMap.remove(11)).toBe('at')
  expect(treeMap.remove(12)).toBe('au')
  expect(treeMap.remove(13)).toBe('av')
  expect(treeMap.remove(14)).toBe('aw')
  expect(treeMap.remove(15)).toBe('ax')
  expect(treeMap.remove(16)).toBe('ay')
  expect(treeMap.remove(17)).toBe('az')
  expect(treeMap.remove(18)).toBe('aA')
  expect(treeMap.remove(19)).toBe('aB')
  expect(treeMap.remove(20)).toBe('aC')
  expect(treeMap.remove(21)).toBe('aD')
  expect(treeMap.remove(22)).toBe('aE')
  expect(treeMap.remove(23)).toBe('aF')
  expect(treeMap.remove(24)).toBeUndefined()
  treeMap.put(-23, 'aV')
  treeMap.put(-22, 'aU')
  treeMap.put(-21, 'aT')
  treeMap.put(-20, 'aS')
  treeMap.put(-19, 'aR')
  treeMap.put(-18, 'aQ')
  treeMap.put(-17, 'aP')
  treeMap.put(-16, 'aO')
  treeMap.put(-15, 'aN')
  treeMap.put(-14, 'aM')
  treeMap.put(-13, 'aL')
  treeMap.put(-12, 'aK')
  treeMap.put(-11, 'aJ')
  treeMap.put(-10, 'aI')
  treeMap.put(-9, 'aH')
  treeMap.put(-8, 'aG')
  treeMap.put(-7, 'ai')
  treeMap.put(-6, 'ae')
  treeMap.put(-5, 'aj')
  treeMap.put(-4, 'aW')
  treeMap.put(-3, 'ak')
  treeMap.put(-2, 'af')
  treeMap.put(-1, 'al')
  treeMap.put(1, 'am')
  treeMap.put(2, 'ag')
  treeMap.put(3, 'an')
  treeMap.put(4, 'aX')
  treeMap.put(5, 'ao')
  treeMap.put(6, 'ah')
  treeMap.put(7, 'ap')
  treeMap.put(8, 'aq')
  treeMap.put(9, 'ar')
  treeMap.put(10, 'as')
  treeMap.put(11, 'at')
  treeMap.put(12, 'au')
  treeMap.put(13, 'av')
  treeMap.put(14, 'aw')
  treeMap.put(15, 'ax')
  treeMap.put(16, 'ay')
  treeMap.put(17, 'az')
  treeMap.put(18, 'aA')
  treeMap.put(19, 'aB')
  treeMap.put(20, 'aC')
  treeMap.put(21, 'aD')
  treeMap.put(22, 'aE')
  treeMap.put(23, 'aF')
  expect(treeMap.remove(24)).toBeUndefined()
  expect(treeMap.remove(23)).toBe('aF')
  expect(treeMap.remove(22)).toBe('aE')
  expect(treeMap.remove(21)).toBe('aD')
  expect(treeMap.remove(20)).toBe('aC')
  expect(treeMap.remove(19)).toBe('aB')
  expect(treeMap.remove(18)).toBe('aA')
  expect(treeMap.remove(17)).toBe('az')
  expect(treeMap.remove(16)).toBe('ay')
  expect(treeMap.remove(15)).toBe('ax')
  expect(treeMap.remove(14)).toBe('aw')
  expect(treeMap.remove(13)).toBe('av')
  expect(treeMap.remove(12)).toBe('au')
  expect(treeMap.remove(11)).toBe('at')
  expect(treeMap.remove(10)).toBe('as')
  expect(treeMap.remove(9)).toBe('ar')
  expect(treeMap.remove(8)).toBe('aq')
  expect(treeMap.remove(7)).toBe('ap')
  expect(treeMap.remove(6)).toBe('ah')
  expect(treeMap.remove(5)).toBe('ao')
  expect(treeMap.remove(4)).toBe('aX')
  expect(treeMap.remove(3)).toBe('an')
  expect(treeMap.remove(2)).toBe('ag')
  expect(treeMap.remove(1)).toBe('am')
  expect(treeMap.remove(-1)).toBe('al')
  expect(treeMap.remove(-2)).toBe('af')
  expect(treeMap.remove(-3)).toBe('ak')
  expect(treeMap.remove(-4)).toBe('aW')
  expect(treeMap.remove(-5)).toBe('aj')
  expect(treeMap.remove(-6)).toBe('ae')
  expect(treeMap.remove(-7)).toBe('ai')
  expect(treeMap.remove(-8)).toBe('aG')
  expect(treeMap.remove(-9)).toBe('aH')
  expect(treeMap.remove(-10)).toBe('aI')
  expect(treeMap.remove(-11)).toBe('aJ')
  expect(treeMap.remove(-12)).toBe('aK')
  expect(treeMap.remove(-13)).toBe('aL')
  expect(treeMap.remove(-14)).toBe('aM')
  expect(treeMap.remove(-15)).toBe('aN')
  expect(treeMap.remove(-16)).toBe('aO')
  expect(treeMap.remove(-17)).toBe('aP')
  expect(treeMap.remove(-18)).toBe('aQ')
  expect(treeMap.remove(-19)).toBe('aR')
  expect(treeMap.remove(-20)).toBe('aS')
  expect(treeMap.remove(-21)).toBe('aT')
  expect(treeMap.remove(-22)).toBe('aU')
  expect(treeMap.remove(-23)).toBe('aV')
  expect(treeMap.remove(-24)).toBeUndefined()
})

test('TreeMap::isEmpty', () => {
  const treeMap = new TreeMap<number, string>()
  expect(treeMap.isEmpty).toBeTruthy()
  treeMap.put(0, 'a')
  expect(treeMap.isEmpty).toBeFalsy()
  treeMap.put(0, 'b')
  expect(treeMap.isEmpty).toBeFalsy()
  treeMap.put(-4, 'c')
  expect(treeMap.isEmpty).toBeFalsy()
  treeMap.put(4, 'd')
  expect(treeMap.isEmpty).toBeFalsy()
  treeMap.put(-6, 'e')
  expect(treeMap.isEmpty).toBeFalsy()
})

test('TreeMap::length', () => {
  const treeMap = new TreeMap<number, string>()
  expect(treeMap.length).toBe(0)
  treeMap.put(0, 'a')
  expect(treeMap.length).toBe(1)
  treeMap.put(0, 'b')
  expect(treeMap.length).toBe(1)
  treeMap.put(-4, 'c')
  expect(treeMap.length).toBe(2)
  treeMap.put(4, 'd')
  expect(treeMap.length).toBe(3)
  treeMap.put(-6, 'e')
  expect(treeMap.length).toBe(4)
})

test('TreeMap::min', () => {
  const treeMap = new TreeMap<number, string>()
  expect(treeMap.min()).toBeUndefined()
  treeMap.put(0, 'a')
  expect(treeMap.min()).toEqual({ key: 0, value: 'a' })
  treeMap.put(0, 'b')
  expect(treeMap.min()).toEqual({ key: 0, value: 'b' })
  treeMap.put(-4, 'c')
  expect(treeMap.min()).toEqual({ key: -4, value: 'c' })
  treeMap.put(4, 'd')
  expect(treeMap.min()).toEqual({ key: -4, value: 'c' })
  treeMap.put(-6, 'e')
  expect(treeMap.min()).toEqual({ key: -6, value: 'e' })
  treeMap.put(-2, 'f')
  expect(treeMap.min()).toEqual({ key: -6, value: 'e' })
  treeMap.put(2, 'g')
  expect(treeMap.min()).toEqual({ key: -6, value: 'e' })
  treeMap.put(6, 'h')
  expect(treeMap.min()).toEqual({ key: -6, value: 'e' })
  treeMap.put(-7, 'i')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(-5, 'j')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(-3, 'k')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(-1, 'l')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(1, 'm')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(3, 'n')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(5, 'o')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(7, 'p')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(8, 'q')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(9, 'r')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(10, 's')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(11, 't')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(12, 'u')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(13, 'v')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(14, 'w')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(15, 'x')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(16, 'y')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(17, 'z')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(18, 'A')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(19, 'B')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(20, 'C')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(21, 'D')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(22, 'E')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(23, 'F')
  expect(treeMap.min()).toEqual({ key: -7, value: 'i' })
  treeMap.put(-8, 'G')
  expect(treeMap.min()).toEqual({ key: -8, value: 'G' })
  treeMap.put(-9, 'H')
  expect(treeMap.min()).toEqual({ key: -9, value: 'H' })
  treeMap.put(-10, 'I')
  expect(treeMap.min()).toEqual({ key: -10, value: 'I' })
  treeMap.put(-11, 'J')
  expect(treeMap.min()).toEqual({ key: -11, value: 'J' })
  treeMap.put(-12, 'K')
  expect(treeMap.min()).toEqual({ key: -12, value: 'K' })
  treeMap.put(-13, 'L')
  expect(treeMap.min()).toEqual({ key: -13, value: 'L' })
  treeMap.put(-14, 'M')
  expect(treeMap.min()).toEqual({ key: -14, value: 'M' })
  treeMap.put(-15, 'N')
  expect(treeMap.min()).toEqual({ key: -15, value: 'N' })
  treeMap.put(-16, 'O')
  expect(treeMap.min()).toEqual({ key: -16, value: 'O' })
  treeMap.put(-17, 'P')
  expect(treeMap.min()).toEqual({ key: -17, value: 'P' })
  treeMap.put(-18, 'Q')
  expect(treeMap.min()).toEqual({ key: -18, value: 'Q' })
  treeMap.put(-19, 'R')
  expect(treeMap.min()).toEqual({ key: -19, value: 'R' })
  treeMap.put(-20, 'S')
  expect(treeMap.min()).toEqual({ key: -20, value: 'S' })
  treeMap.put(-21, 'T')
  expect(treeMap.min()).toEqual({ key: -21, value: 'T' })
  treeMap.put(-22, 'U')
  expect(treeMap.min()).toEqual({ key: -22, value: 'U' })
  treeMap.put(-23, 'V')
  expect(treeMap.min()).toEqual({ key: -23, value: 'V' })
  treeMap.put(-4, 'W')
  expect(treeMap.min()).toEqual({ key: -23, value: 'V' })
  treeMap.put(4, 'X')
  expect(treeMap.min()).toEqual({ key: -23, value: 'V' })
})

test('TreeMap::max', () => {
  const treeMap = new TreeMap<number, string>()
  expect(treeMap.max()).toBeUndefined()
  treeMap.put(0, 'a')
  expect(treeMap.max()).toEqual({ key: 0, value: 'a' })
  treeMap.put(0, 'b')
  expect(treeMap.max()).toEqual({ key: 0, value: 'b' })
  treeMap.put(-4, 'c')
  expect(treeMap.max()).toEqual({ key: 0, value: 'b' })
  treeMap.put(4, 'd')
  expect(treeMap.max()).toEqual({ key: 4, value: 'd' })
  treeMap.put(-6, 'e')
  expect(treeMap.max()).toEqual({ key: 4, value: 'd' })
  treeMap.put(-2, 'f')
  expect(treeMap.max()).toEqual({ key: 4, value: 'd' })
  treeMap.put(2, 'g')
  expect(treeMap.max()).toEqual({ key: 4, value: 'd' })
  treeMap.put(6, 'h')
  expect(treeMap.max()).toEqual({ key: 6, value: 'h' })
  treeMap.put(-7, 'i')
  expect(treeMap.max()).toEqual({ key: 6, value: 'h' })
  treeMap.put(-5, 'j')
  expect(treeMap.max()).toEqual({ key: 6, value: 'h' })
  treeMap.put(-3, 'k')
  expect(treeMap.max()).toEqual({ key: 6, value: 'h' })
  treeMap.put(-1, 'l')
  expect(treeMap.max()).toEqual({ key: 6, value: 'h' })
  treeMap.put(1, 'm')
  expect(treeMap.max()).toEqual({ key: 6, value: 'h' })
  treeMap.put(3, 'n')
  expect(treeMap.max()).toEqual({ key: 6, value: 'h' })
  treeMap.put(5, 'o')
  expect(treeMap.max()).toEqual({ key: 6, value: 'h' })
  treeMap.put(7, 'p')
  expect(treeMap.max()).toEqual({ key: 7, value: 'p' })
  treeMap.put(8, 'q')
  expect(treeMap.max()).toEqual({ key: 8, value: 'q' })
  treeMap.put(9, 'r')
  expect(treeMap.max()).toEqual({ key: 9, value: 'r' })
  treeMap.put(10, 's')
  expect(treeMap.max()).toEqual({ key: 10, value: 's' })
  treeMap.put(11, 't')
  expect(treeMap.max()).toEqual({ key: 11, value: 't' })
  treeMap.put(12, 'u')
  expect(treeMap.max()).toEqual({ key: 12, value: 'u' })
  treeMap.put(13, 'v')
  expect(treeMap.max()).toEqual({ key: 13, value: 'v' })
  treeMap.put(14, 'w')
  expect(treeMap.max()).toEqual({ key: 14, value: 'w' })
  treeMap.put(15, 'x')
  expect(treeMap.max()).toEqual({ key: 15, value: 'x' })
  treeMap.put(16, 'y')
  expect(treeMap.max()).toEqual({ key: 16, value: 'y' })
  treeMap.put(17, 'z')
  expect(treeMap.max()).toEqual({ key: 17, value: 'z' })
  treeMap.put(18, 'A')
  expect(treeMap.max()).toEqual({ key: 18, value: 'A' })
  treeMap.put(19, 'B')
  expect(treeMap.max()).toEqual({ key: 19, value: 'B' })
  treeMap.put(20, 'C')
  expect(treeMap.max()).toEqual({ key: 20, value: 'C' })
  treeMap.put(21, 'D')
  expect(treeMap.max()).toEqual({ key: 21, value: 'D' })
  treeMap.put(22, 'E')
  expect(treeMap.max()).toEqual({ key: 22, value: 'E' })
  treeMap.put(23, 'F')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-8, 'G')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-9, 'H')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-10, 'I')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-11, 'J')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-12, 'K')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-13, 'L')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-14, 'M')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-15, 'N')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-16, 'O')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-17, 'P')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-18, 'Q')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-19, 'R')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-20, 'S')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-21, 'T')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-22, 'U')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-23, 'V')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(-4, 'W')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
  treeMap.put(4, 'X')
  expect(treeMap.max()).toEqual({ key: 23, value: 'F' })
})

test('empty tree map to array', () => {
  expect(new TreeMap<number, string>().toArray()).toEqual([])
})

test('tree map with an entry to array', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.bulkPut({ key: 1, value: 'a' })
  expect(treeMap.toArray()).toEqual([{ key: 1, value: 'a' }])
})

test('tree map with 2 entries to array', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.bulkPut({ key: 1, value: 'a' }, { key: 2, value: 'b' })
  expect(treeMap.toArray()).toEqual([{ key: 1, value: 'a' }, { key: 2, value: 'b' }])
})

test('tree map with 3 entries to array', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.bulkPut({ key: 1, value: 'a' }, { key: 2, value: 'b' }, { key: 3, value: 'c' })
  expect(treeMap.toArray()).toEqual([{ key: 1, value: 'a' }, { key: 2, value: 'b' }, { key: 3, value: 'c' }])
})

test('tree map with 4 entries to array', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.bulkPut({ key: 1, value: 'a' }, { key: 2, value: 'b' }, { key: 3, value: 'c' }, { key: 4, value: 'd' })
  expect(treeMap.toArray())
    .toEqual([{ key: 1, value: 'a' }, { key: 2, value: 'b' }, { key: 3, value: 'c' }, { key: 4, value: 'd' }])
})

test('tree map with 5 entries to array', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.bulkPut(
    { key: 1, value: 'a' },
    { key: 2, value: 'b' },
    { key: 3, value: 'c' },
    { key: 4, value: 'd' },
    { key: 5, value: 'e' }
  )
  expect(treeMap.toArray()).toEqual([
    { key: 1, value: 'a' },
    { key: 2, value: 'b' },
    { key: 3, value: 'c' },
    { key: 4, value: 'd' },
    { key: 5, value: 'e' }
  ])
})

test('tree map with 6 entries to array', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.bulkPut(
    { key: 1, value: 'a' },
    { key: 2, value: 'b' },
    { key: 3, value: 'c' },
    { key: 4, value: 'd' },
    { key: 5, value: 'e' },
    { key: 6, value: 'f' }
  )
  expect(treeMap.toArray()).toEqual([
    { key: 1, value: 'a' },
    { key: 2, value: 'b' },
    { key: 3, value: 'c' },
    { key: 4, value: 'd' },
    { key: 5, value: 'e' },
    { key: 6, value: 'f' }
  ])
})

test('tree map with 7 entries to array', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.bulkPut(
    { key: 1, value: 'a' },
    { key: 2, value: 'b' },
    { key: 3, value: 'c' },
    { key: 4, value: 'd' },
    { key: 5, value: 'e' },
    { key: 6, value: 'f' },
    { key: 7, value: 'g' }
  )
  expect(treeMap.toArray()).toEqual([
    { key: 1, value: 'a' },
    { key: 2, value: 'b' },
    { key: 3, value: 'c' },
    { key: 4, value: 'd' },
    { key: 5, value: 'e' },
    { key: 6, value: 'f' },
    { key: 7, value: 'g' }
  ])
})

test('tree map with 8 entries to array', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.bulkPut(
    { key: 1, value: 'a' },
    { key: 2, value: 'b' },
    { key: 3, value: 'c' },
    { key: 4, value: 'd' },
    { key: 5, value: 'e' },
    { key: 6, value: 'f' },
    { key: 7, value: 'g' },
    { key: 8, value: 'h' }
  )
  expect(treeMap.toArray()).toEqual([
    { key: 1, value: 'a' },
    { key: 2, value: 'b' },
    { key: 3, value: 'c' },
    { key: 4, value: 'd' },
    { key: 5, value: 'e' },
    { key: 6, value: 'f' },
    { key: 7, value: 'g' },
    { key: 8, value: 'h' }
  ])
})

test('TreeMap::clear', () => {
  const treeMap = new TreeMap<number, string>()
  treeMap.put(-23, 'aV')
  treeMap.put(-22, 'aU')
  treeMap.put(-21, 'aT')
  treeMap.put(-20, 'aS')
  treeMap.put(-19, 'aR')
  treeMap.put(-18, 'aQ')
  treeMap.put(-17, 'aP')
  treeMap.put(-16, 'aO')
  treeMap.put(-15, 'aN')
  treeMap.put(-14, 'aM')
  treeMap.put(-13, 'aL')
  treeMap.put(-12, 'aK')
  treeMap.put(-11, 'aJ')
  treeMap.put(-10, 'aI')
  treeMap.put(-9, 'aH')
  treeMap.put(-8, 'aG')
  treeMap.put(-7, 'ai')
  treeMap.put(-6, 'ae')
  treeMap.put(-5, 'aj')
  treeMap.put(-4, 'aW')
  treeMap.put(-3, 'ak')
  treeMap.put(-2, 'af')
  treeMap.put(-1, 'al')
  treeMap.put(1, 'am')
  treeMap.put(2, 'ag')
  treeMap.put(3, 'an')
  treeMap.put(4, 'aX')
  treeMap.put(5, 'ao')
  treeMap.put(6, 'ah')
  treeMap.put(7, 'ap')
  treeMap.put(8, 'aq')
  treeMap.put(9, 'ar')
  treeMap.put(10, 'as')
  treeMap.put(11, 'at')
  treeMap.put(12, 'au')
  treeMap.put(13, 'av')
  treeMap.put(14, 'aw')
  treeMap.put(15, 'ax')
  treeMap.put(16, 'ay')
  treeMap.put(17, 'az')
  treeMap.put(18, 'aA')
  treeMap.put(19, 'aB')
  treeMap.put(20, 'aC')
  treeMap.put(21, 'aD')
  treeMap.put(22, 'aE')
  treeMap.put(23, 'aF')
  treeMap.clear()
  expect(treeMap.get(-23)).toBeUndefined()
  expect(treeMap.get(-22)).toBeUndefined()
  expect(treeMap.get(-21)).toBeUndefined()
  expect(treeMap.get(-20)).toBeUndefined()
  expect(treeMap.get(-19)).toBeUndefined()
  expect(treeMap.get(-18)).toBeUndefined()
  expect(treeMap.get(-17)).toBeUndefined()
  expect(treeMap.get(-16)).toBeUndefined()
  expect(treeMap.get(-15)).toBeUndefined()
  expect(treeMap.get(-14)).toBeUndefined()
  expect(treeMap.get(-13)).toBeUndefined()
  expect(treeMap.get(-12)).toBeUndefined()
  expect(treeMap.get(-11)).toBeUndefined()
  expect(treeMap.get(-10)).toBeUndefined()
  expect(treeMap.get(-9)).toBeUndefined()
  expect(treeMap.get(-8)).toBeUndefined()
  expect(treeMap.get(-7)).toBeUndefined()
  expect(treeMap.get(-6)).toBeUndefined()
  expect(treeMap.get(-5)).toBeUndefined()
  expect(treeMap.get(-4)).toBeUndefined()
  expect(treeMap.get(-3)).toBeUndefined()
  expect(treeMap.get(-2)).toBeUndefined()
  expect(treeMap.get(-1)).toBeUndefined()
  expect(treeMap.get(1)).toBeUndefined()
  expect(treeMap.get(2)).toBeUndefined()
  expect(treeMap.get(3)).toBeUndefined()
  expect(treeMap.get(4)).toBeUndefined()
  expect(treeMap.get(5)).toBeUndefined()
  expect(treeMap.get(6)).toBeUndefined()
  expect(treeMap.get(7)).toBeUndefined()
  expect(treeMap.get(8)).toBeUndefined()
  expect(treeMap.get(9)).toBeUndefined()
  expect(treeMap.get(10)).toBeUndefined()
  expect(treeMap.get(11)).toBeUndefined()
  expect(treeMap.get(12)).toBeUndefined()
  expect(treeMap.get(13)).toBeUndefined()
  expect(treeMap.get(14)).toBeUndefined()
  expect(treeMap.get(15)).toBeUndefined()
  expect(treeMap.get(16)).toBeUndefined()
  expect(treeMap.get(17)).toBeUndefined()
  expect(treeMap.get(18)).toBeUndefined()
  expect(treeMap.get(19)).toBeUndefined()
  expect(treeMap.get(20)).toBeUndefined()
  expect(treeMap.get(21)).toBeUndefined()
  expect(treeMap.get(22)).toBeUndefined()
  expect(treeMap.get(23)).toBeUndefined()
})
