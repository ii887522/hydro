'use strict'

import Vector4 from '../../../src/struct/Vector4.js'

test('Vector4::fromVector4', () => {
  expect(Vector4.fromVector4(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(0, 0, 0, 0))
  expect(Vector4.fromVector4(new Vector4(1, 0, 0, 0))).toEqual(new Vector4(1, 0, 0, 0))
  expect(Vector4.fromVector4(new Vector4(2, 0, 0, 0))).toEqual(new Vector4(2, 0, 0, 0))
  expect(Vector4.fromVector4(new Vector4(2, 1, 0, 0))).toEqual(new Vector4(2, 1, 0, 0))
  expect(Vector4.fromVector4(new Vector4(2, 2, 0, 0))).toEqual(new Vector4(2, 2, 0, 0))
  expect(Vector4.fromVector4(new Vector4(2, 2, 1, 0))).toEqual(new Vector4(2, 2, 1, 0))
  expect(Vector4.fromVector4(new Vector4(2, 2, 2, 0))).toEqual(new Vector4(2, 2, 2, 0))
  expect(Vector4.fromVector4(new Vector4(2, 2, 2, 1))).toEqual(new Vector4(2, 2, 2, 1))
  expect(Vector4.fromVector4(new Vector4(2, 2, 2, 2))).toEqual(new Vector4(2, 2, 2, 2))
})

test('Vector4::fromValue', () => {
  expect(Vector4.fromValue(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(Vector4.fromValue(1)).toEqual(new Vector4(1, 1, 1, 1))
  expect(Vector4.fromValue(2)).toEqual(new Vector4(2, 2, 2, 2))
})

test('Vector4::withX', () => {
  expect(new Vector4(0, 0, 0, 0).withX(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(1, 0, 0, 0).withX(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).withX(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(2, 1, 0, 0).withX(0)).toEqual(new Vector4(0, 1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).withX(0)).toEqual(new Vector4(0, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).withX(1)).toEqual(new Vector4(1, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).withX(2)).toEqual(new Vector4(2, 2, 0, 0))
  expect(new Vector4(2, 2, 1, 0).withX(2)).toEqual(new Vector4(2, 2, 1, 0))
  expect(new Vector4(2, 2, 2, 0).withX(2)).toEqual(new Vector4(2, 2, 2, 0))
  expect(new Vector4(2, 2, 2, 1).withX(2)).toEqual(new Vector4(2, 2, 2, 1))
  expect(new Vector4(2, 2, 2, 2).withX(2)).toEqual(new Vector4(2, 2, 2, 2))
})

test('Vector4::withY', () => {
  expect(new Vector4(0, 0, 0, 0).withY(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(1, 0, 0, 0).withY(0)).toEqual(new Vector4(1, 0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).withY(0)).toEqual(new Vector4(2, 0, 0, 0))
  expect(new Vector4(2, 1, 0, 0).withY(0)).toEqual(new Vector4(2, 0, 0, 0))
  expect(new Vector4(2, 2, 0, 0).withY(0)).toEqual(new Vector4(2, 0, 0, 0))
  expect(new Vector4(2, 2, 0, 0).withY(1)).toEqual(new Vector4(2, 1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).withY(2)).toEqual(new Vector4(2, 2, 0, 0))
  expect(new Vector4(2, 2, 1, 0).withY(2)).toEqual(new Vector4(2, 2, 1, 0))
  expect(new Vector4(2, 2, 2, 0).withY(2)).toEqual(new Vector4(2, 2, 2, 0))
  expect(new Vector4(2, 2, 2, 1).withY(2)).toEqual(new Vector4(2, 2, 2, 1))
  expect(new Vector4(2, 2, 2, 2).withY(2)).toEqual(new Vector4(2, 2, 2, 2))
})

test('Vector4::withZ', () => {
  expect(new Vector4(0, 0, 0, 0).withZ(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(1, 0, 0, 0).withZ(0)).toEqual(new Vector4(1, 0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).withZ(0)).toEqual(new Vector4(2, 0, 0, 0))
  expect(new Vector4(2, 1, 0, 0).withZ(0)).toEqual(new Vector4(2, 1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).withZ(0)).toEqual(new Vector4(2, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).withZ(1)).toEqual(new Vector4(2, 2, 1, 0))
  expect(new Vector4(2, 2, 0, 0).withZ(2)).toEqual(new Vector4(2, 2, 2, 0))
  expect(new Vector4(2, 2, 1, 0).withZ(2)).toEqual(new Vector4(2, 2, 2, 0))
  expect(new Vector4(2, 2, 2, 0).withZ(2)).toEqual(new Vector4(2, 2, 2, 0))
  expect(new Vector4(2, 2, 2, 1).withZ(2)).toEqual(new Vector4(2, 2, 2, 1))
  expect(new Vector4(2, 2, 2, 2).withZ(2)).toEqual(new Vector4(2, 2, 2, 2))
})

test('Vector4::withW', () => {
  expect(new Vector4(0, 0, 0, 0).withW(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(1, 0, 0, 0).withW(0)).toEqual(new Vector4(1, 0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).withW(0)).toEqual(new Vector4(2, 0, 0, 0))
  expect(new Vector4(2, 1, 0, 0).withW(0)).toEqual(new Vector4(2, 1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).withW(0)).toEqual(new Vector4(2, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).withW(1)).toEqual(new Vector4(2, 2, 0, 1))
  expect(new Vector4(2, 2, 0, 0).withW(2)).toEqual(new Vector4(2, 2, 0, 2))
  expect(new Vector4(2, 2, 1, 0).withW(2)).toEqual(new Vector4(2, 2, 1, 2))
  expect(new Vector4(2, 2, 2, 0).withW(2)).toEqual(new Vector4(2, 2, 2, 2))
  expect(new Vector4(2, 2, 2, 1).withW(2)).toEqual(new Vector4(2, 2, 2, 2))
  expect(new Vector4(2, 2, 2, 2).withW(2)).toEqual(new Vector4(2, 2, 2, 2))
})

test('Vector4::plus', () => {
  expect(new Vector4(0, 0, 0, 0).plus(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(1, 0, 0, 0).plus(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(1, 0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).plus(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(2, 0, 0, 0))
  expect(new Vector4(2, 1, 0, 0).plus(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(2, 1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).plus(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(2, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).plus(new Vector4(1, 0, 0, 0))).toEqual(new Vector4(3, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).plus(new Vector4(2, 0, 0, 0))).toEqual(new Vector4(4, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).plus(new Vector4(2, 1, 0, 0))).toEqual(new Vector4(4, 3, 0, 0))
  expect(new Vector4(2, 2, 0, 0).plus(new Vector4(2, 2, 0, 0))).toEqual(new Vector4(4, 4, 0, 0))
  expect(new Vector4(2, 2, 1, 0).plus(new Vector4(2, 2, 0, 0))).toEqual(new Vector4(4, 4, 1, 0))
  expect(new Vector4(2, 2, 2, 0).plus(new Vector4(2, 2, 0, 0))).toEqual(new Vector4(4, 4, 2, 0))
  expect(new Vector4(2, 2, 2, 0).plus(new Vector4(2, 2, 1, 0))).toEqual(new Vector4(4, 4, 3, 0))
  expect(new Vector4(2, 2, 2, 0).plus(new Vector4(2, 2, 2, 0))).toEqual(new Vector4(4, 4, 4, 0))
  expect(new Vector4(2, 2, 2, 1).plus(new Vector4(2, 2, 2, 0))).toEqual(new Vector4(4, 4, 4, 1))
  expect(new Vector4(2, 2, 2, 2).plus(new Vector4(2, 2, 2, 0))).toEqual(new Vector4(4, 4, 4, 2))
  expect(new Vector4(2, 2, 2, 2).plus(new Vector4(2, 2, 2, 1))).toEqual(new Vector4(4, 4, 4, 3))
  expect(new Vector4(2, 2, 2, 2).plus(new Vector4(2, 2, 2, 2))).toEqual(new Vector4(4, 4, 4, 4))
})

test('Vector4::minus', () => {
  expect(new Vector4(0, 0, 0, 0).minus(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(1, 0, 0, 0).minus(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(1, 0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).minus(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(2, 0, 0, 0))
  expect(new Vector4(2, 1, 0, 0).minus(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(2, 1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).minus(new Vector4(0, 0, 0, 0))).toEqual(new Vector4(2, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).minus(new Vector4(1, 0, 0, 0))).toEqual(new Vector4(1, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).minus(new Vector4(2, 0, 0, 0))).toEqual(new Vector4(0, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).minus(new Vector4(2, 1, 0, 0))).toEqual(new Vector4(0, 1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).minus(new Vector4(2, 2, 0, 0))).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(2, 2, 1, 0).minus(new Vector4(2, 2, 0, 0))).toEqual(new Vector4(0, 0, 1, 0))
  expect(new Vector4(2, 2, 2, 0).minus(new Vector4(2, 2, 0, 0))).toEqual(new Vector4(0, 0, 2, 0))
  expect(new Vector4(2, 2, 2, 0).minus(new Vector4(2, 2, 1, 0))).toEqual(new Vector4(0, 0, 1, 0))
  expect(new Vector4(2, 2, 2, 0).minus(new Vector4(2, 2, 2, 0))).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(2, 2, 2, 1).minus(new Vector4(2, 2, 2, 0))).toEqual(new Vector4(0, 0, 0, 1))
  expect(new Vector4(2, 2, 2, 2).minus(new Vector4(2, 2, 2, 0))).toEqual(new Vector4(0, 0, 0, 2))
  expect(new Vector4(2, 2, 2, 2).minus(new Vector4(2, 2, 2, 1))).toEqual(new Vector4(0, 0, 0, 1))
  expect(new Vector4(2, 2, 2, 2).minus(new Vector4(2, 2, 2, 2))).toEqual(new Vector4(0, 0, 0, 0))
})

test('Vector4::times', () => {
  expect(new Vector4(0, 0, 0, 0).times(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(1, 0, 0, 0).times(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).times(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(2, 1, 0, 0).times(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(2, 2, 0, 0).times(0)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(2, 2, 0, 0).times(1)).toEqual(new Vector4(2, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).times(2)).toEqual(new Vector4(4, 4, 0, 0))
  expect(new Vector4(2, 2, 1, 0).times(2)).toEqual(new Vector4(4, 4, 2, 0))
  expect(new Vector4(2, 2, 2, 0).times(2)).toEqual(new Vector4(4, 4, 4, 0))
  expect(new Vector4(2, 2, 2, 1).times(2)).toEqual(new Vector4(4, 4, 4, 2))
  expect(new Vector4(2, 2, 2, 2).times(2)).toEqual(new Vector4(4, 4, 4, 4))
})

test('Vector4::divide', () => {
  expect(new Vector4(0, 0, 0, 0).divide(1)).toEqual(new Vector4(0, 0, 0, 0))
  expect(new Vector4(1, 0, 0, 0).divide(1)).toEqual(new Vector4(1, 0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).divide(1)).toEqual(new Vector4(2, 0, 0, 0))
  expect(new Vector4(2, 1, 0, 0).divide(1)).toEqual(new Vector4(2, 1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).divide(1)).toEqual(new Vector4(2, 2, 0, 0))
  expect(new Vector4(2, 2, 0, 0).divide(2)).toEqual(new Vector4(1, 1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).divide(4)).toEqual(new Vector4(0.5, 0.5, 0, 0))
  expect(new Vector4(2, 2, 1, 0).divide(4)).toEqual(new Vector4(0.5, 0.5, 0.25, 0))
  expect(new Vector4(2, 2, 2, 0).divide(4)).toEqual(new Vector4(0.5, 0.5, 0.5, 0))
  expect(new Vector4(2, 2, 2, 1).divide(4)).toEqual(new Vector4(0.5, 0.5, 0.5, 0.25))
  expect(new Vector4(2, 2, 2, 2).divide(4)).toEqual(new Vector4(0.5, 0.5, 0.5, 0.5))
})

test('Vector4::assign', () => {
  const vector = new Vector4()
  vector.assign(new Vector4(0, 0, 0, 0))
  expect(vector).toEqual(new Vector4(0, 0, 0, 0))
  vector.assign(new Vector4(1, 0, 0, 0))
  expect(vector).toEqual(new Vector4(1, 0, 0, 0))
  vector.assign(new Vector4(2, 0, 0, 0))
  expect(vector).toEqual(new Vector4(2, 0, 0, 0))
  vector.assign(new Vector4(2, 1, 0, 0))
  expect(vector).toEqual(new Vector4(2, 1, 0, 0))
  vector.assign(new Vector4(2, 2, 0, 0))
  expect(vector).toEqual(new Vector4(2, 2, 0, 0))
  vector.assign(new Vector4(2, 2, 1, 0))
  expect(vector).toEqual(new Vector4(2, 2, 1, 0))
  vector.assign(new Vector4(2, 2, 2, 0))
  expect(vector).toEqual(new Vector4(2, 2, 2, 0))
  vector.assign(new Vector4(2, 2, 2, 1))
  expect(vector).toEqual(new Vector4(2, 2, 2, 1))
  vector.assign(new Vector4(2, 2, 2, 2))
  expect(vector).toEqual(new Vector4(2, 2, 2, 2))
})

test('Vector4::plusAssign', () => {
  const vector = new Vector4()
  vector.plusAssign(new Vector4(0, 0, 0, 0))
  expect(vector).toEqual(new Vector4(0, 0, 0, 0))
  vector.plusAssign(new Vector4(1, 0, 0, 0))
  expect(vector).toEqual(new Vector4(1, 0, 0, 0))
  vector.plusAssign(new Vector4(2, 0, 0, 0))
  expect(vector).toEqual(new Vector4(3, 0, 0, 0))
  vector.plusAssign(new Vector4(2, 1, 0, 0))
  expect(vector).toEqual(new Vector4(5, 1, 0, 0))
  vector.plusAssign(new Vector4(2, 2, 0, 0))
  expect(vector).toEqual(new Vector4(7, 3, 0, 0))
  vector.plusAssign(new Vector4(2, 2, 1, 0))
  expect(vector).toEqual(new Vector4(9, 5, 1, 0))
  vector.plusAssign(new Vector4(2, 2, 2, 0))
  expect(vector).toEqual(new Vector4(11, 7, 3, 0))
  vector.plusAssign(new Vector4(2, 2, 2, 1))
  expect(vector).toEqual(new Vector4(13, 9, 5, 1))
  vector.plusAssign(new Vector4(2, 2, 2, 2))
  expect(vector).toEqual(new Vector4(15, 11, 7, 3))
})

test('Vector4::minusAssign', () => {
  const vector = new Vector4()
  vector.minusAssign(new Vector4(0, 0, 0, 0))
  expect(vector).toEqual(new Vector4(0, 0, 0, 0))
  vector.minusAssign(new Vector4(1, 0, 0, 0))
  expect(vector).toEqual(new Vector4(-1, 0, 0, 0))
  vector.minusAssign(new Vector4(2, 0, 0, 0))
  expect(vector).toEqual(new Vector4(-3, 0, 0, 0))
  vector.minusAssign(new Vector4(2, 1, 0, 0))
  expect(vector).toEqual(new Vector4(-5, -1, 0, 0))
  vector.minusAssign(new Vector4(2, 2, 0, 0))
  expect(vector).toEqual(new Vector4(-7, -3, 0, 0))
  vector.minusAssign(new Vector4(2, 2, 1, 0))
  expect(vector).toEqual(new Vector4(-9, -5, -1, 0))
  vector.minusAssign(new Vector4(2, 2, 2, 0))
  expect(vector).toEqual(new Vector4(-11, -7, -3, 0))
  vector.minusAssign(new Vector4(2, 2, 2, 1))
  expect(vector).toEqual(new Vector4(-13, -9, -5, -1))
  vector.minusAssign(new Vector4(2, 2, 2, 2))
  expect(vector).toEqual(new Vector4(-15, -11, -7, -3))
})

test('Vector4::timesAssign', () => {
  const vector = new Vector4(1, 1, 1, 1)
  vector.timesAssign(1)
  expect(vector).toEqual(new Vector4(1, 1, 1, 1))
  vector.timesAssign(2)
  expect(vector).toEqual(new Vector4(2, 2, 2, 2))
  vector.timesAssign(3)
  expect(vector).toEqual(new Vector4(6, 6, 6, 6))
})

test('Vector4::divideAssign', () => {
  const vector = new Vector4(1, 1, 1, 1)
  vector.divideAssign(1)
  expect(vector).toEqual(new Vector4(1, 1, 1, 1))
  vector.divideAssign(2)
  expect(vector).toEqual(new Vector4(0.5, 0.5, 0.5, 0.5))
  vector.divideAssign(5)
  expect(vector).toEqual(new Vector4(0.1, 0.1, 0.1, 0.1))
})

test('Vector4::isEqual', () => {
  expect(new Vector4(0, 0, 0, 0).isEqual(new Vector4(0, 0, 0, 0))).toBeTruthy()
  expect(new Vector4(1, 0, 0, 0).isEqual(new Vector4(0, 0, 0, 0))).toBeFalsy()
  expect(new Vector4(2, 0, 0, 0).isEqual(new Vector4(0, 0, 0, 0))).toBeFalsy()
  expect(new Vector4(2, 1, 0, 0).isEqual(new Vector4(0, 0, 0, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 0, 0).isEqual(new Vector4(0, 0, 0, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 0, 0).isEqual(new Vector4(1, 0, 0, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 0, 0).isEqual(new Vector4(2, 0, 0, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 0, 0).isEqual(new Vector4(2, 1, 0, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 0, 0).isEqual(new Vector4(2, 2, 0, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 1, 0).isEqual(new Vector4(2, 2, 0, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 2, 0).isEqual(new Vector4(2, 2, 0, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 2, 0).isEqual(new Vector4(2, 2, 1, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 2, 0).isEqual(new Vector4(2, 2, 2, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 2, 1).isEqual(new Vector4(2, 2, 2, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 2, 2).isEqual(new Vector4(2, 2, 2, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 2, 2).isEqual(new Vector4(2, 2, 2, 1))).toBeFalsy()
  expect(new Vector4(2, 2, 2, 2).isEqual(new Vector4(2, 2, 2, 2))).toBeTruthy()
})

test('Vector4::isNotEqual', () => {
  expect(new Vector4(0, 0, 0, 0).isNotEqual(new Vector4(0, 0, 0, 0))).toBeFalsy()
  expect(new Vector4(1, 0, 0, 0).isNotEqual(new Vector4(0, 0, 0, 0))).toBeTruthy()
  expect(new Vector4(2, 0, 0, 0).isNotEqual(new Vector4(0, 0, 0, 0))).toBeTruthy()
  expect(new Vector4(2, 1, 0, 0).isNotEqual(new Vector4(0, 0, 0, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 0, 0).isNotEqual(new Vector4(0, 0, 0, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 0, 0).isNotEqual(new Vector4(1, 0, 0, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 0, 0).isNotEqual(new Vector4(2, 0, 0, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 0, 0).isNotEqual(new Vector4(2, 1, 0, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 0, 0).isNotEqual(new Vector4(2, 2, 0, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 1, 0).isNotEqual(new Vector4(2, 2, 0, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 2, 0).isNotEqual(new Vector4(2, 2, 0, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 2, 0).isNotEqual(new Vector4(2, 2, 1, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 2, 0).isNotEqual(new Vector4(2, 2, 2, 0))).toBeFalsy()
  expect(new Vector4(2, 2, 2, 1).isNotEqual(new Vector4(2, 2, 2, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 2, 2).isNotEqual(new Vector4(2, 2, 2, 0))).toBeTruthy()
  expect(new Vector4(2, 2, 2, 2).isNotEqual(new Vector4(2, 2, 2, 1))).toBeTruthy()
  expect(new Vector4(2, 2, 2, 2).isNotEqual(new Vector4(2, 2, 2, 2))).toBeFalsy()
})

test('Vector4::squaredLength', () => {
  expect(new Vector4(0, 0, 0, 0).squaredLength).toBe(0)
  expect(new Vector4(1, 0, 0, 0).squaredLength).toBe(1)
  expect(new Vector4(2, 0, 0, 0).squaredLength).toBe(4)
  expect(new Vector4(2, 1, 0, 0).squaredLength).toBe(5)
  expect(new Vector4(2, 2, 0, 0).squaredLength).toBe(8)
  expect(new Vector4(2, 2, 1, 0).squaredLength).toBe(9)
  expect(new Vector4(2, 2, 2, 0).squaredLength).toBe(12)
  expect(new Vector4(2, 2, 2, 1).squaredLength).toBe(13)
  expect(new Vector4(2, 2, 2, 2).squaredLength).toBe(16)
})

test('Vector4::length', () => {
  expect(new Vector4(0, 0, 0, 0).length).toBe(0)
  expect(new Vector4(1, 0, 0, 0).length).toBe(1)
  expect(new Vector4(2, 0, 0, 0).length).toBe(2)
  expect(new Vector4(2, 1, 0, 0).length).toBe(Math.sqrt(5))
  expect(new Vector4(2, 2, 0, 0).length).toBe(Math.sqrt(8))
  expect(new Vector4(2, 2, 1, 0).length).toBe(3)
  expect(new Vector4(2, 2, 2, 0).length).toBe(Math.sqrt(12))
  expect(new Vector4(2, 2, 2, 1).length).toBe(Math.sqrt(13))
  expect(new Vector4(2, 2, 2, 2).length).toBe(4)
})

test('Vector4::normalized', () => {
  expect(new Vector4(1, 0, 0, 0).normalized).toEqual(new Vector4(1, 0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).normalized).toEqual(new Vector4(1, 0, 0, 0))
  expect(new Vector4(3, 0, 0, 0).normalized).toEqual(new Vector4(1, 0, 0, 0))
  expect(new Vector4(3, 4, 0, 0).normalized).toEqual(new Vector4(0.6, 0.8, 0, 0))
  expect(new Vector4(6, 8, 0, 0).normalized).toEqual(new Vector4(0.6, 0.8, 0, 0))
  expect(new Vector4(2, 2, 1, 0).normalized).toEqual(new Vector4(2 / 3, 2 / 3, 1 / 3, 0))
  expect(new Vector4(2, 2, 2, 2).normalized).toEqual(new Vector4(0.5, 0.5, 0.5, 0.5))
})

test('Vector4.xFliped', () => {
  expect(new Vector4(0, 0, 0, 0).xFliped).toEqual(new Vector4(-0, 0, 0, 0))
  expect(new Vector4(1, 0, 0, 0).xFliped).toEqual(new Vector4(-1, 0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).xFliped).toEqual(new Vector4(-2, 0, 0, 0))
  expect(new Vector4(2, 1, 0, 0).xFliped).toEqual(new Vector4(-2, 1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).xFliped).toEqual(new Vector4(-2, 2, 0, 0))
  expect(new Vector4(2, 2, 1, 0).xFliped).toEqual(new Vector4(-2, 2, 1, 0))
  expect(new Vector4(2, 2, 2, 0).xFliped).toEqual(new Vector4(-2, 2, 2, 0))
  expect(new Vector4(2, 2, 2, 1).xFliped).toEqual(new Vector4(-2, 2, 2, 1))
  expect(new Vector4(2, 2, 2, 2).xFliped).toEqual(new Vector4(-2, 2, 2, 2))
})

test('Vector4.yFliped', () => {
  expect(new Vector4(0, 0, 0, 0).yFliped).toEqual(new Vector4(0, -0, 0, 0))
  expect(new Vector4(1, 0, 0, 0).yFliped).toEqual(new Vector4(1, -0, 0, 0))
  expect(new Vector4(2, 0, 0, 0).yFliped).toEqual(new Vector4(2, -0, 0, 0))
  expect(new Vector4(2, 1, 0, 0).yFliped).toEqual(new Vector4(2, -1, 0, 0))
  expect(new Vector4(2, 2, 0, 0).yFliped).toEqual(new Vector4(2, -2, 0, 0))
  expect(new Vector4(2, 2, 1, 0).yFliped).toEqual(new Vector4(2, -2, 1, 0))
  expect(new Vector4(2, 2, 2, 0).yFliped).toEqual(new Vector4(2, -2, 2, 0))
  expect(new Vector4(2, 2, 2, 1).yFliped).toEqual(new Vector4(2, -2, 2, 1))
  expect(new Vector4(2, 2, 2, 2).yFliped).toEqual(new Vector4(2, -2, 2, 2))
})

test('Vector4.zFliped', () => {
  expect(new Vector4(0, 0, 0, 0).zFliped).toEqual(new Vector4(0, 0, -0, 0))
  expect(new Vector4(1, 0, 0, 0).zFliped).toEqual(new Vector4(1, 0, -0, 0))
  expect(new Vector4(2, 0, 0, 0).zFliped).toEqual(new Vector4(2, 0, -0, 0))
  expect(new Vector4(2, 1, 0, 0).zFliped).toEqual(new Vector4(2, 1, -0, 0))
  expect(new Vector4(2, 2, 0, 0).zFliped).toEqual(new Vector4(2, 2, -0, 0))
  expect(new Vector4(2, 2, 1, 0).zFliped).toEqual(new Vector4(2, 2, -1, 0))
  expect(new Vector4(2, 2, 2, 0).zFliped).toEqual(new Vector4(2, 2, -2, 0))
  expect(new Vector4(2, 2, 2, 1).zFliped).toEqual(new Vector4(2, 2, -2, 1))
  expect(new Vector4(2, 2, 2, 2).zFliped).toEqual(new Vector4(2, 2, -2, 2))
})

test('Vector4.wFliped', () => {
  expect(new Vector4(0, 0, 0, 0).wFliped).toEqual(new Vector4(0, 0, 0, -0))
  expect(new Vector4(1, 0, 0, 0).wFliped).toEqual(new Vector4(1, 0, 0, -0))
  expect(new Vector4(2, 0, 0, 0).wFliped).toEqual(new Vector4(2, 0, 0, -0))
  expect(new Vector4(2, 1, 0, 0).wFliped).toEqual(new Vector4(2, 1, 0, -0))
  expect(new Vector4(2, 2, 0, 0).wFliped).toEqual(new Vector4(2, 2, 0, -0))
  expect(new Vector4(2, 2, 1, 0).wFliped).toEqual(new Vector4(2, 2, 1, -0))
  expect(new Vector4(2, 2, 2, 0).wFliped).toEqual(new Vector4(2, 2, 2, -0))
  expect(new Vector4(2, 2, 2, 1).wFliped).toEqual(new Vector4(2, 2, 2, -1))
  expect(new Vector4(2, 2, 2, 2).wFliped).toEqual(new Vector4(2, 2, 2, -2))
})

test('Vector4.fliped', () => {
  expect(new Vector4(0, 0, 0, 0).fliped).toEqual(new Vector4(-0, -0, -0, -0))
  expect(new Vector4(1, 0, 0, 0).fliped).toEqual(new Vector4(-1, -0, -0, -0))
  expect(new Vector4(2, 0, 0, 0).fliped).toEqual(new Vector4(-2, -0, -0, -0))
  expect(new Vector4(2, 1, 0, 0).fliped).toEqual(new Vector4(-2, -1, -0, -0))
  expect(new Vector4(2, 2, 0, 0).fliped).toEqual(new Vector4(-2, -2, -0, -0))
  expect(new Vector4(2, 2, 1, 0).fliped).toEqual(new Vector4(-2, -2, -1, -0))
  expect(new Vector4(2, 2, 2, 0).fliped).toEqual(new Vector4(-2, -2, -2, -0))
  expect(new Vector4(2, 2, 2, 1).fliped).toEqual(new Vector4(-2, -2, -2, -1))
  expect(new Vector4(2, 2, 2, 2).fliped).toEqual(new Vector4(-2, -2, -2, -2))
})

test('Vector4.toString', () => {
  expect(new Vector4(0, 0, 0, 0).toString()).toBe('0,0,0,0')
  expect(new Vector4(1, 0, 0, 0).toString()).toBe('1,0,0,0')
  expect(new Vector4(2, 0, 0, 0).toString()).toBe('2,0,0,0')
  expect(new Vector4(2, 1, 0, 0).toString()).toBe('2,1,0,0')
  expect(new Vector4(2, 2, 0, 0).toString()).toBe('2,2,0,0')
  expect(new Vector4(2, 2, 1, 0).toString()).toBe('2,2,1,0')
  expect(new Vector4(2, 2, 2, 0).toString()).toBe('2,2,2,0')
  expect(new Vector4(2, 2, 2, 1).toString()).toBe('2,2,2,1')
  expect(new Vector4(2, 2, 2, 2).toString()).toBe('2,2,2,2')
})
