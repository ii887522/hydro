'use strict';
import IDManager from '../../../src/any/IDManager.js';
test('IDManager::next', () => {
    const idManager = new IDManager();
    expect(idManager.next()).toBe(0);
    expect(idManager.next()).toBe(1);
    expect(idManager.next()).toBe(2);
    idManager.free(0);
    expect(idManager.next()).toBe(0);
    expect(idManager.next()).toBe(3);
    expect(idManager.next()).toBe(4);
    expect(idManager.next()).toBe(5);
    idManager.free(0);
    idManager.free(3);
    idManager.free(5);
    expect(idManager.next()).toBe(5);
    expect(idManager.next()).toBe(3);
    expect(idManager.next()).toBe(0);
    expect(idManager.next()).toBe(6);
    expect(idManager.next()).toBe(7);
    idManager.free(0);
    idManager.free(7);
    expect(idManager.next()).toBe(7);
    idManager.free(7);
    idManager.free(3);
    idManager.free(4);
    expect(idManager.next()).toBe(4);
    idManager.free(4);
    idManager.free(1);
    idManager.free(6);
    expect(idManager.next()).toBe(6);
    expect(idManager.next()).toBe(1);
    expect(idManager.next()).toBe(4);
    expect(idManager.next()).toBe(3);
    expect(idManager.next()).toBe(7);
    expect(idManager.next()).toBe(0);
    expect(idManager.next()).toBe(8);
    expect(idManager.next()).toBe(9);
});
test('IDManager::free', () => {
    const idManager = new IDManager();
    expect(() => idManager.free(-1)).toThrow(RangeError);
    expect(() => idManager.free(10)).toThrow(RangeError);
});
