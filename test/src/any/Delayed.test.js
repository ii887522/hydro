'use strict';
import Delayed from '../../../src/any/Delayed.js';
test('step delayed value when initial value is 0', () => {
    const delayedValue = new Delayed(0);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(0);
    delayedValue.value = 1;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(0);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(2);
    expect(delayedValue.value).toBe(1);
    delayedValue.value = 2;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(2);
    delayedValue.step(2);
    expect(delayedValue.value).toBe(2);
    delayedValue.setNow(3);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(3);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(3);
    delayedValue.setNow(4);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(4);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(4);
});
test('step delayed value when initial value is 5', () => {
    const delayedValue = new Delayed(5);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(5);
    delayedValue.value = 1;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(5);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(2);
    expect(delayedValue.value).toBe(1);
    delayedValue.value = 2;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(2);
    delayedValue.step(2);
    expect(delayedValue.value).toBe(2);
    delayedValue.setNow(3);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(3);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(3);
    delayedValue.setNow(4);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(4);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(4);
});
test('step delayed value when initial value is 6', () => {
    const delayedValue = new Delayed(6);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(6);
    delayedValue.value = 1;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(6);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(2);
    expect(delayedValue.value).toBe(1);
    delayedValue.value = 2;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(2);
    delayedValue.step(2);
    expect(delayedValue.value).toBe(2);
    delayedValue.setNow(3);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(3);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(3);
    delayedValue.setNow(4);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(4);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(4);
});
test('step delayed value when initial value is 6', () => {
    const delayedValue = new Delayed(6);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(6);
    delayedValue.value = 1;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(6);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(2);
    expect(delayedValue.value).toBe(1);
    delayedValue.value = 2;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(2);
    delayedValue.step(2);
    expect(delayedValue.value).toBe(2);
    delayedValue.setNow(3);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(3);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(3);
    delayedValue.setNow(4);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(4);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(4);
});
test('step delayed value when initial value is 6 and timeout after 10 time units', () => {
    const delayedValue = new Delayed(6, 10);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(6);
    delayedValue.value = 1;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(6);
    delayedValue.step(2);
    expect(delayedValue.value).toBe(6);
    delayedValue.step(8);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(10);
    expect(delayedValue.value).toBe(1);
    delayedValue.value = 2;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(3);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(9);
    expect(delayedValue.value).toBe(2);
    delayedValue.step(10);
    expect(delayedValue.value).toBe(2);
    delayedValue.setNow(3);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(3);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(3);
    delayedValue.setNow(4);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(4);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(4);
});
test('step delayed value when initial value is 6 and timeout after 100 time units', () => {
    const delayedValue = new Delayed(6, 100);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(6);
    delayedValue.value = 1;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(6);
    delayedValue.step(20);
    expect(delayedValue.value).toBe(6);
    delayedValue.step(80);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(100);
    expect(delayedValue.value).toBe(1);
    delayedValue.value = 2;
    delayedValue.step(0);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(30);
    expect(delayedValue.value).toBe(1);
    delayedValue.step(90);
    expect(delayedValue.value).toBe(2);
    delayedValue.step(100);
    expect(delayedValue.value).toBe(2);
    delayedValue.setNow(3);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(3);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(3);
    delayedValue.setNow(4);
    delayedValue.step(0);
    expect(delayedValue.value).toBe(4);
    delayedValue.step(1);
    expect(delayedValue.value).toBe(4);
});
